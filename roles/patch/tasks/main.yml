# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
  - name: Create OCM response file
    script: expect_rsp.sh {{ oracle_base }} {{ oracle_home }} {{ swlib_unzip_path }}
    args:
      creates: "{{ swlib_unzip_path }}/ocm.rsp"
    with_items:
      - "{{ rdbms_patches }}"
      - "{{ gi_patches }}"
    when:
      - item.ocm
      - item.release == oracle_ver
    become: yes
    become_user: "{{ oracle_user }}"
    tags: create_rsp

  - name: 12.2 bugfix - MOS (Doc ID 2401455.1)
    copy:
      src: "{{ oracle_root }}/oraInventory/oraInst.loc"
      dest: "{{ grid_home }}/oraInst.loc"
      remote_src: yes
      owner: "{{ grid_user }}"
      group: "{{ oracle_group }}"
      mode: '0640'
    when: oracle_ver == '12.2.0.1.0'
    become: yes
    become_user: root

  - name: (GI) Copy patches from bucket
    import_role:
      name: swlib
      tasks_from: gcscopy
    vars:
      patching_type: gi_patching
    tags: patch_grid,sw_copy

  - name: (GI) Update OPatch
    unarchive:
      src: "{{ swlib_unzip_path }}/{{ item.patchfile }}"
      dest: "{{ grid_home }}"
      remote_src: yes
    with_items:
      - "{{ opatch_patches }}"
    when:
      - item.release == oracle_ver
      - item.category == "OPatch"
    become: yes
    become_user: "{{ grid_user }}"
    tags: update_opatch_gi

  - name: (RDBMS) Update OPatch
    unarchive:
      src: "{{ swlib_unzip_path }}/{{ item.patchfile }}"
      dest: "{{ oracle_home }}"
      remote_src: yes
    with_items:
      - "{{ opatch_patches }}"
    when:
      - item.release == oracle_ver
      - item.category == "OPatch"
    become: yes
    become_user: "{{ oracle_user }}"
    tags: update_opatch_db

  - name: (GI) Unzip patch
    unarchive:
      src: "{{ swlib_unzip_path }}/{{ item.patchfile }}"
      dest: "{{ swlib_unzip_path }}"
      remote_src: yes
    with_items:
      - "{{ gi_patches }}"
    when: item.release == oracle_rel and item.category != "HAS_Bugfix"
    become: yes
    become_user: "{{ grid_user }}"
    tags: patch_grid,sw_unzip

  - name: (GI) Apply patch
    include_tasks: opatch_apply.yml
    vars:
      sw_home: "{{ grid_home }}"
      sw_user: 'root'
      silent: ''
      home_type: 'GRID'
    with_items:
      - "{{ gi_patches }}"
    loop_control:
      loop_var: patch
    when: patch.release == oracle_rel and patch.category != "HAS_Bugfix"
    tags: patch_grid,opatch_apply

  - name: (GI) Remove unzipped patch
    file:
      path: "{{ swlib_unzip_path }}/{{ item.patchnum }}"
      state: absent
    with_items:
      - "{{ gi_patches }}"
    when: item.release == oracle_rel and item.category != "HAS_Bugfix"
    become: yes
    become_user: root
    tags: patch_grid,sw_remove

  - name: (RDBMS) Copy patches from bucket
    import_role:
      name: swlib
      tasks_from: gcscopy
    vars:
      patching_type: db_patching
    tags: patch_rdbms,sw_copy

  - name: (RDBMS) Unzip patch
    unarchive:
      src: "{{ swlib_unzip_path }}/{{ item.patchfile }}"
      dest: "{{ swlib_unzip_path }}"
      remote_src: yes
    with_items:
      - "{{ rdbms_patches }}"
    when: item.release == oracle_rel
    become: yes
    become_user: "{{ oracle_user }}"
    tags: patch_rdbms,sw_unzip

  - name: (RDBMS) remove db_state.out if it exists
    file:
      path: "{{ swlib_unzip_path }}/db_state.out"
      state: absent

  - name: (RDBMS) Stop home
    command: "{{ oracle_home }}/bin/srvctl stop home -o {{ oracle_home }} -t immediate -s {{ swlib_unzip_path }}/db_state.out"
    environment:
      ORACLE_HOME: "{{ oracle_home }}"
    register: stop_home
    failed_when: stop_home.rc not in [0,2]
    become: yes
    become_user: "{{ oracle_user }}"
    tags: patch_rdbms,pre_rdbms,stop_home

  - name: (RDBMS) Stop home results
    debug:
      msg: "{{ stop_home }}"
      verbosity: 1
    tags: patch_rdbms,stop_home

  - name: (RDBMS) Apply patch
    include_tasks: opatch_apply.yml
    vars:
      sw_home: "{{ oracle_home }}"
      sw_user: "{{ oracle_user }}"
      silent: '-silent'
      home_type: 'DB'
    with_items:
      - "{{ rdbms_patches }}"
    loop_control:
      loop_var: patch
    when: patch.release == oracle_rel
    tags: patch_rdbms,opatch_apply

  - name: (RDBMS) Remove unzipped patch
    file:
      path: "{{ swlib_unzip_path }}/{{ item.patchnum }}"
      state: absent
    with_items:
      - "{{ rdbms_patches }}"
    when: item.release == oracle_rel
    become: yes
    become_user: root
    tags: patch_rdbms,sw_remove

  - name: (RDBMS) Start home
    command: "{{ oracle_home }}/bin/srvctl start home -o {{ oracle_home }} -s {{ swlib_unzip_path }}/db_state.out"
    environment:
      ORACLE_HOME: "{{ oracle_home }}"
    register: start_home
    failed_when: start_home.rc not in [0,2]
    become: yes
    become_user: "{{ oracle_user }}"
    tags: patch_rdbms,start_home

  - name: (RDBMS) Start home results
    debug:
      msg: "{{ start_home }}"
      verbosity: 1
    tags: patch_rdbms,start_home
