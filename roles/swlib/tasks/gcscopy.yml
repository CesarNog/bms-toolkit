# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: copy gi archives from gcs to BM instance
  shell: |
    set -o pipefail
    {% for i in item.files %}
    ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "ls {{ swlib_path }}/{{ i }}"
    if [[ $? -eq 0 ]]
      then
        ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
          "unzip -t {{ swlib_path }}/{{ i }}"
        if [[ $? -ne 0 ]]
          then
            gsutil cat gs://{{ swlib_mount_src}}/{{ i }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
              {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ i }}"
        fi
       else
         gsutil cat gs://{{ swlib_mount_src}}/{{ i }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
           {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ i }}"
    fi
        {% endfor %}
  args:
    executable: /bin/bash
  with_items:
    - "{{ gi_software }}"
  when: item.version == oracle_ver and patching_type is not defined
  delegate_to: 127.0.0.1

- name: verifying gi zip file integrity
  shell: |
    set -o pipefail
    {% for i in item.files %}
    unzip -t {{ swlib_path }}/{{ i }} > /dev/null
        {% endfor %}
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ gi_software }}"
  when: item.version == oracle_ver and patching_type is not defined
  failed_when: shell_result.stderr != ""

- name: copy gi patch archives from gcs to BM instance
  shell: |
    set -o pipefail
    ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "ls {{ swlib_path }}/{{ item.patchfile }}"
    if [[ $? -eq 0 ]]
      then
        ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
          "unzip -t {{ swlib_path }}/{{ item.patchfile }}"
        if [[ $? -ne 0 ]]
          then
            gsutil cat gs://{{ swlib_mount_src}}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
              {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
        fi
      else
        gsutil cat gs://{{ swlib_mount_src}}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
    fi
  args:
    executable: /bin/bash
  with_items:
    - "{{ gi_patches }}"
  when: item.release == oracle_rel and patching_type == "gi_patching"
  delegate_to: 127.0.0.1

- name: verifying gi patch archive integrity
  shell: |
    set -o pipefail
    {% for i in item.patchfile %}
    unzip -t {{ swlib_path }}/{{ i }} > /dev/null
        {% endfor %}
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ gi_patches }}"
  when: item.release == oracle_rel and patching_type == "gi_patching"
  failed_when: shell_result.stderr != ""


- name: copy gi opatches archives from gcs to BM instance
  shell: |
    set -o pipefail
    ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "ls {{ swlib_path }}/{{ item.patchfile }}"
    if [[ $? -eq 0 ]]
      then
        ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
          "unzip -t {{ swlib_path }}/{{ item.patchfile }}"
        if [[ $? -ne 0 ]]
          then
            gsutil cat gs://{{ swlib_mount_src}}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
              {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
        fi
      else
        gsutil cat gs://{{ swlib_mount_src}}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
    fi
  args:
    executable: /bin/bash
  with_items:
    - "{{ opatch_patches }}"
  when: item.release == oracle_ver and patching_type is defined
  delegate_to: 127.0.0.1

- name: verifying opatch zip file integrity
  shell: |
    set -o pipefail
    unzip -t {{ swlib_path }}/{{ item.patchfile }} > /dev/null
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ opatch_patches }}"
  when: item.release == oracle_ver and patching_type is defined
  failed_when: shell_result.stderr != ""


- name: copy rdbms archives from gcs to BM instance
  shell: |
    set -o pipefail
    {% for i in item.files %}
    ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "ls {{ swlib_path }}/{{ i }}"
    if [[ $? -eq 0 ]]
      then
        ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
          "unzip -t {{ swlib_path }}/{{ i }}"
        if [[ $? -ne 0 ]]
          then
            gsutil cat gs://{{ swlib_mount_src}}/{{ i }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
              {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ i }}"
        fi
       else
         gsutil cat gs://{{ swlib_mount_src}}/{{ i }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
           {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ i }}"
    fi
        {% endfor %}
  args:
    executable: /bin/bash
  with_items:
    - "{{ rdbms_software }}"
  when: item.version == oracle_ver and patching_type is not defined
  delegate_to: 127.0.0.1

- name: verifying rdbms archives integrity
  shell: |
    set -o pipefail
    {% for i in item.files %}
    unzip -t {{ swlib_path }}/{{ i }} > /dev/null
        {% endfor %}
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ rdbms_software }}"
  when: item.version == oracle_ver and patching_type is not defined
  failed_when: shell_result.stderr != ""


- name: copy rdbms patch archives from gcs to BM instance
  shell: |
    set -o pipefail
    ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
      "ls {{ swlib_path }}/{{ item.patchfile }}"
    if [[ $? -eq 0 ]]
      then
        ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} {{ ansible_ssh_user }}@{{ ansible_ssh_host }} \
          "unzip -t {{ swlib_path }}/{{ item.patchfile }}"
        if [[ $? -ne 0 ]]
          then
            gsutil cat gs://{{ swlib_mount_src}}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
              {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
        fi
      else
        gsutil cat gs://{{ swlib_mount_src}}/{{ item.patchfile }} | ssh -i {{ ansible_ssh_private_key_file}} {{ ansible_ssh_extra_args }} \
          {{ ansible_ssh_user }}@{{ ansible_ssh_host }} "cat > {{ swlib_path }}/{{ item.patchfile }}"
    fi
  args:
    executable: /bin/bash
  with_items:
    - "{{ rdbms_patches }}"
  when: item.release == oracle_rel and patching_type == "db_patching"
  delegate_to: 127.0.0.1

- name: verifying rdbms patch file integrity
  shell: |
    set -o pipefail
    {% for i in item.patchfile %}
    unzip -t {{ swlib_path }}/{{ i }} > /dev/null
        {% endfor %}
  register: shell_result
  args:
    executable: /bin/bash
  with_items:
    - "{{ rdbms_patches }}"
  when: item.release == oracle_rel and patching_type == "db_patching"
  failed_when: shell_result.stderr != ""
